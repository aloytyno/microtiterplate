function tableout = importfinaltable(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE Import data from a spreadsheet
%   DATA = IMPORTFILE(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: NaN
%
% Example:
%   finaltable = importfinaltable('All_results.xlsx','Sheet2',2,5001);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2017/05/16 17:32:33
% Copyright 2017 The MathWorks, Inc.

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 2;
    endRow = 5001;
end

%% Import the data
[~, ~, raw] = xlsread(workbookFile, sheetName, sprintf('A%d:W%d',startRow(1),endRow(1)));
for block=2:length(startRow)
    [~, ~, tmpRawBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:W%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
stringVectors = string(raw(:,1));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
tableout.FileName = stringVectors(:,1);
tableout.CompoundNumber = data(:,1);
tableout.NegControl = data(:,2);
tableout.Conc1 = data(:,3);
tableout.Conc2 = data(:,4);
tableout.Conc3 = data(:,5);
tableout.Conc4 = data(:,6);
tableout.Conc5 = data(:,7);
tableout.Conc6 = data(:,8);
tableout.Conc7 = data(:,9);
tableout.Conc8 = data(:,10);
tableout.Conc9 = data(:,11);
tableout.Conc10 = data(:,12);
tableout.PosControl = data(:,13);
tableout.EC50 = data(:,14);
tableout.Hills_Slope = data(:,15);
tableout.max = data(:,16);
tableout.min = data(:,17);
tableout.sse = data(:,18);
tableout.rsquare = data(:,19);
tableout.lower_bend = data(:,20);
tableout.upper_bend = data(:,21);
tableout.Reliable = data(:,22);

