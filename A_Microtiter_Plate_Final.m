%% WORKING WITH MANY FILES FROM SCIENTIFIC INSTRUMENTS
% 
% This is an example of how MATLAB can be used to facilitate a typical
% workflow for an experimentalist who needs to automate analysis across
% many (hundreds) of experiments with instrument data organized in flat
% files, TXT, CSV files, or spreadsheets.
% 
% In this example, we want to find the top leads from hundreds experiments.
% The data are in CSV files from a Dose-Response Experiment in a 96-well
% plate format.  Each row of data corresponds to a serial dilution (middle
% 10 wells) of a given compound with a negative control (first column) and
% positive control (last column. The dose response readings in each
% microwell are in arbitrary units (e.g. fluorescence, luminescence,
% absorbance) ranging from ~0 to ~100(%). We fit the experimental data to a
% four parameter model and add a quality control metric drawn from the
% scientific literature.
%
% In the A_Microtiter_Plate_One file we prototyped our workflow.  In this
% script we are calling that workflow in a loop.
% 
% The final result is a table of compounds sorted in decreasing potentcy 
% and filtered by a quality control metric. This also includes a report, and a
% spreadsheet file.
%
%% WORKFLOW:  Think of line as a single step in a process 
% 1. Ask the end user to select a set of files to process
% 2. For each file (each microplate) selected, do the following
%   a. Load the file using autogenerated code
%   b. Preprocess (positive and negative controls) for entire file
%   c. Add filenames and corresponding compound names
% 3 For each row of the file (each compound)
%   a. Generate X and Y from the file data
%   b. Fit to a four parameter sigmoidal curve using autogenerated code
%   c. Gather fit parameters into a table
%   d. Add quality control metric from literature based on fit parameters
%   e. Merge results into a table for each plate
% 4. Automate Steps 2 and 3 for as many files were selected in Step 1
% 5. Sort final results by EC50 and reliability, and share results

% Copyright 2017 The MathWorks, Inc.
% Developed by Jeff Gruneich, Ph.D., Heather Gorr, Ph.D.
%
%% ACCESS DATA
% Use a UI Get call to open a load file dialog box to select multiple files to read and process 
[FileNames,ds] = my_select_microtiter_files;                

%% ANALYZE EACH FILE IN A LOOP
% Create empty final results table and empty figure we need for automation
finaltable = table;                                                         
figure  % for all curves in one figure, use this line instead of inside the loop

for filenum = 1:numel(FileNames)
    
    % Analyze one plate & display results to Command Window 
    % note because we already had this done, we simply turned that entire
    % script into a function - so we can easily build upon previous work.
    plate_result = my_A_Microtiter_Plate_Onefile(ds);  %#ok<NOPTS>
    
    % Build up the final result table for all files selected
    finaltable = vertcat(finaltable, plate_result);                                    
end

%% SHARE: WRITE RESULTS TABLES TO A SINGLE SPREADSHEET FILE AND REPORT
[topleads, finaltable] = my_export_microplate_results(finaltable)           %#ok<NOPTS>

% Share Results as a file ready for an electronic notebook
% open('A_Microtiter_Plate_Final.html');
% winopen('Final_Microplate_Results.xlsx');

